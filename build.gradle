buildscript {
    repositories {
        maven {
            name 'MixinGradle'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        if (project.use_mixins.toBoolean()) {
            classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        }
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

// apply plugin: 'maven-publish'
if (project.use_mixins.toBoolean()) {
    apply plugin: 'org.spongepowered.mixin'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    if (project.has_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run/client')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            workingDirectory project.file('run/server')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "CleanroomMC"
        url = "https://maven.cleanroommc.com"
    }
    maven {
        name = "SpongePowered"
        url = "https://repo.spongepowered.org/maven"
    }
    curseForge()
    maven {
        name = "BlameJared Maven"
        url = "https://maven.blamejared.com"
        content {
            includeGroup "CraftTweaker2"
        }
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    if (project.use_mixins.toBoolean()) {
        def mixinbooter_version = "5.0"
        compileOnly fg.deobf("zone.rong:mixinbooter:${mixinbooter_version}")
        runtimeOnly "zone.rong:mixinbooter:${mixinbooter_version}"
    }

    // Kotlin
    def kotlin_version = "1.6.21"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

    // Forgelin-Continuous v1.6.21.0
    api curse("forgelin-continuous", 456403L, 3771384L)

    // CraftTweaker
    runtimeOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.+"

    // Had Enough Item v4.24.0
    runtimeOnly fg.deobf(curse("had-enough-items", 557549L, 3957880L))

    // Had Enough Characters v1.2.0
    runtimeOnly fg.deobf(curse("had-enough-characters", 640802L, 3924849L))

    // InWorldCrafting v1.2.0
    def inworldcrafting_dependency = curse("inworldcrafting", 311938L, 2683267L)
    compileOnly fg.deobf(inworldcrafting_dependency)
    runtimeOnly fg.deobf(inworldcrafting_dependency)

    // Ex Nihilo: Creatio v0.4.7.2
    def exnihilocreatio_dependency = curse("ex-nihilo-creatio", 274456L, 2817545L)
    compileOnly fg.deobf(exnihilocreatio_dependency)
    runtimeOnly fg.deobf(exnihilocreatio_dependency)
    // Shadowfacts' Forgelin v1.8.4
    runtimeOnly fg.deobf(curse("shadowfacts-forgelin", 248453L, 2785465L))
    // JEI
    compileOnly fg.deobf("mezz.jei:jei_1.12.2:4.16.+:api")
}

fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'deobf'
    }
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    task apiZip(type: Jar) {
        from(sourceSets.main.java) {
            include "name/api/**"
        }
        from(sourceSets.main.output) {
            include "name/api/**"
        }

        classifier = 'api'
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.outputDir)
}

jar {
    manifest {
        // noinspection GroovyAssignabilityCheck
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        attributes(attribute_map)
    }
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

jar.finalizedBy('reobfJar')

processResources {
    // required to allow file expansion later
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
